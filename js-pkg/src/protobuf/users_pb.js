// source: users.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.users.Access', null, global);
goog.exportSymbol('proto.users.All', null, global);
goog.exportSymbol('proto.users.Data', null, global);
goog.exportSymbol('proto.users.Empty', null, global);
goog.exportSymbol('proto.users.GetReq', null, global);
goog.exportSymbol('proto.users.GetReq.OneofCase', null, global);
goog.exportSymbol('proto.users.IsAuth', null, global);
goog.exportSymbol('proto.users.LoginReq', null, global);
goog.exportSymbol('proto.users.LoginRes', null, global);
goog.exportSymbol('proto.users.RegisterReq', null, global);
goog.exportSymbol('proto.users.RegisterRes', null, global);
goog.exportSymbol('proto.users.Token', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.users.Empty = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.users.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.users.Empty.displayName = 'proto.users.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.users.All = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.users.All.repeatedFields_, null);
};
goog.inherits(proto.users.All, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.users.All.displayName = 'proto.users.All';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.users.Data = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.users.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.users.Data.displayName = 'proto.users.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.users.IsAuth = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.users.IsAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.users.IsAuth.displayName = 'proto.users.IsAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.users.LoginReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.users.LoginReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.users.LoginReq.displayName = 'proto.users.LoginReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.users.LoginRes = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.users.LoginRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.users.LoginRes.displayName = 'proto.users.LoginRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.users.GetReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.users.GetReq.oneofGroups_);
};
goog.inherits(proto.users.GetReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.users.GetReq.displayName = 'proto.users.GetReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.users.RegisterReq = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.users.RegisterReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.users.RegisterReq.displayName = 'proto.users.RegisterReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.users.RegisterRes = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.users.RegisterRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.users.RegisterRes.displayName = 'proto.users.RegisterRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.users.Token = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.users.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.users.Token.displayName = 'proto.users.Token';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.users.Empty.prototype.toObject = function (opt_includeInstance) {
        return proto.users.Empty.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.users.Empty} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.users.Empty.toObject = function (includeInstance, msg) {
        var f, obj = {};

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.users.Empty}
 */
proto.users.Empty.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.users.Empty;
    return proto.users.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.users.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.users.Empty}
 */
proto.users.Empty.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.users.Empty.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.users.Empty.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.users.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.users.Empty.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.users.All.repeatedFields_ = [1];


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.users.All.prototype.toObject = function (opt_includeInstance) {
        return proto.users.All.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.users.All} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.users.All.toObject = function (includeInstance, msg) {
        var f, obj = {
            usersList: jspb.Message.toObjectList(msg.getUsersList(),
                proto.users.Data.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.users.All}
 */
proto.users.All.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.users.All;
    return proto.users.All.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.users.All} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.users.All}
 */
proto.users.All.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.users.Data;
                reader.readMessage(value, proto.users.Data.deserializeBinaryFromReader);
                msg.addUsers(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.users.All.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.users.All.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.users.All} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.users.All.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUsersList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            proto.users.Data.serializeBinaryToWriter
        );
    }
};


/**
 * repeated Data Users = 1;
 * @return {!Array<!proto.users.Data>}
 */
proto.users.All.prototype.getUsersList = function () {
    return /** @type{!Array<!proto.users.Data>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.users.Data, 1));
};


/**
 * @param {!Array<!proto.users.Data>} value
 * @return {!proto.users.All} returns this
 */
proto.users.All.prototype.setUsersList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.users.Data=} opt_value
 * @param {number=} opt_index
 * @return {!proto.users.Data}
 */
proto.users.All.prototype.addUsers = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.users.Data, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.users.All} returns this
 */
proto.users.All.prototype.clearUsersList = function () {
    return this.setUsersList([]);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.users.Data.prototype.toObject = function (opt_includeInstance) {
        return proto.users.Data.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.users.Data} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.users.Data.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, ""),
            username: jspb.Message.getFieldWithDefault(msg, 2, ""),
            firstname: jspb.Message.getFieldWithDefault(msg, 3, ""),
            lastname: jspb.Message.getFieldWithDefault(msg, 4, ""),
            age: jspb.Message.getFieldWithDefault(msg, 5, 0),
            email: jspb.Message.getFieldWithDefault(msg, 7, ""),
            access: jspb.Message.getFieldWithDefault(msg, 8, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.users.Data}
 */
proto.users.Data.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.users.Data;
    return proto.users.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.users.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.users.Data}
 */
proto.users.Data.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setFirstname(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setLastname(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setAge(value);
                break;
            case 7:
                var value = /** @type {string} */ (reader.readString());
                msg.setEmail(value);
                break;
            case 8:
                var value = /** @type {!proto.users.Access} */ (reader.readEnum());
                msg.setAccess(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.users.Data.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.users.Data.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.users.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.users.Data.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getFirstname();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
    f = message.getLastname();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
    f = message.getAge();
    if (f !== 0) {
        writer.writeInt32(
            5,
            f
        );
    }
    f = message.getEmail();
    if (f.length > 0) {
        writer.writeString(
            7,
            f
        );
    }
    f = message.getAccess();
    if (f !== 0.0) {
        writer.writeEnum(
            8,
            f
        );
    }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.users.Data.prototype.getId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.Data} returns this
 */
proto.users.Data.prototype.setId = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Username = 2;
 * @return {string}
 */
proto.users.Data.prototype.getUsername = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.Data} returns this
 */
proto.users.Data.prototype.setUsername = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Firstname = 3;
 * @return {string}
 */
proto.users.Data.prototype.getFirstname = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.Data} returns this
 */
proto.users.Data.prototype.setFirstname = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Lastname = 4;
 * @return {string}
 */
proto.users.Data.prototype.getLastname = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.Data} returns this
 */
proto.users.Data.prototype.setLastname = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 Age = 5;
 * @return {number}
 */
proto.users.Data.prototype.getAge = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.users.Data} returns this
 */
proto.users.Data.prototype.setAge = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string Email = 7;
 * @return {string}
 */
proto.users.Data.prototype.getEmail = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.Data} returns this
 */
proto.users.Data.prototype.setEmail = function (value) {
    return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional Access Access = 8;
 * @return {!proto.users.Access}
 */
proto.users.Data.prototype.getAccess = function () {
    return /** @type {!proto.users.Access} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.users.Access} value
 * @return {!proto.users.Data} returns this
 */
proto.users.Data.prototype.setAccess = function (value) {
    return jspb.Message.setProto3EnumField(this, 8, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.users.IsAuth.prototype.toObject = function (opt_includeInstance) {
        return proto.users.IsAuth.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.users.IsAuth} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.users.IsAuth.toObject = function (includeInstance, msg) {
        var f, obj = {
            val: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.users.IsAuth}
 */
proto.users.IsAuth.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.users.IsAuth;
    return proto.users.IsAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.users.IsAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.users.IsAuth}
 */
proto.users.IsAuth.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setVal(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.users.IsAuth.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.users.IsAuth.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.users.IsAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.users.IsAuth.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getVal();
    if (f) {
        writer.writeBool(
            1,
            f
        );
    }
};


/**
 * optional bool Val = 1;
 * @return {boolean}
 */
proto.users.IsAuth.prototype.getVal = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.users.IsAuth} returns this
 */
proto.users.IsAuth.prototype.setVal = function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.users.LoginReq.prototype.toObject = function (opt_includeInstance) {
    return proto.users.LoginReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.users.LoginReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.users.LoginReq.toObject = function (includeInstance, msg) {
  var f, obj = {
      identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
      password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.users.LoginReq}
 */
proto.users.LoginReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.users.LoginReq;
    return proto.users.LoginReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.users.LoginReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.users.LoginReq}
 */
proto.users.LoginReq.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
        msg.setIdentifier(value);
        break;
        case 2:
            var value = /** @type {string} */ (reader.readString());
            msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.users.LoginReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
    proto.users.LoginReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.users.LoginReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.users.LoginReq.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
    f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
    f = message.getPassword();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
};


/**
 * optional string Identifier = 1;
 * @return {string}
 */
proto.users.LoginReq.prototype.getIdentifier = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.LoginReq} returns this
 */
proto.users.LoginReq.prototype.setIdentifier = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Password = 2;
 * @return {string}
 */
proto.users.LoginReq.prototype.getPassword = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.LoginReq} returns this
 */
proto.users.LoginReq.prototype.setPassword = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.users.LoginRes.prototype.toObject = function (opt_includeInstance) {
    return proto.users.LoginRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.users.LoginRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.users.LoginRes.toObject = function (includeInstance, msg) {
  var f, obj = {
      data: (f = msg.getData()) && proto.users.Data.toObject(includeInstance, f),
      auth: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.users.LoginRes}
 */
proto.users.LoginRes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.users.LoginRes;
    return proto.users.LoginRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.users.LoginRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.users.LoginRes}
 */
proto.users.LoginRes.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
        var value = new proto.users.Data;
        reader.readMessage(value, proto.users.Data.deserializeBinaryFromReader);
        msg.setData(value);
        break;
        case 2:
            var value = /** @type {string} */ (reader.readString());
            msg.setAuth(value);
            break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.users.LoginRes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
    proto.users.LoginRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.users.LoginRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.users.LoginRes.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
    f = message.getData();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.users.Data.serializeBinaryToWriter
        );
    }
    f = message.getAuth();
  if (f.length > 0) {
    writer.writeString(
        2,
      f
    );
  }
};


/**
 * optional Data data = 1;
 * @return {?proto.users.Data}
 */
proto.users.LoginRes.prototype.getData = function () {
    return /** @type{?proto.users.Data} */ (
        jspb.Message.getWrapperField(this, proto.users.Data, 1));
};


/**
 * @param {?proto.users.Data|undefined} value
 * @return {!proto.users.LoginRes} returns this
 */
proto.users.LoginRes.prototype.setData = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.users.LoginRes} returns this
 */
proto.users.LoginRes.prototype.clearData = function () {
    return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.users.LoginRes.prototype.hasData = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Auth = 2;
 * @return {string}
 */
proto.users.LoginRes.prototype.getAuth = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.LoginRes} returns this
 */
proto.users.LoginRes.prototype.setAuth = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.users.GetReq.oneofGroups_ = [[1, 2, 3]];

/**
 * @enum {number}
 */
proto.users.GetReq.OneofCase = {
    ONEOF_NOT_SET: 0,
    ID: 1,
    NAME: 2,
    EMAIL: 3
};

/**
 * @return {proto.users.GetReq.OneofCase}
 */
proto.users.GetReq.prototype.getOneofCase = function () {
    return /** @type {proto.users.GetReq.OneofCase} */(jspb.Message.computeOneofCase(this, proto.users.GetReq.oneofGroups_[0]));
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.users.GetReq.prototype.toObject = function (opt_includeInstance) {
        return proto.users.GetReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.users.GetReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.users.GetReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, ""),
            name: jspb.Message.getFieldWithDefault(msg, 2, ""),
            email: jspb.Message.getFieldWithDefault(msg, 3, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.users.GetReq}
 */
proto.users.GetReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.users.GetReq;
    return proto.users.GetReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.users.GetReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.users.GetReq}
 */
proto.users.GetReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setId(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setEmail(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.users.GetReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.users.GetReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.users.GetReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.users.GetReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = /** @type {string} */ (jspb.Message.getField(message, 1));
    if (f != null) {
        writer.writeString(
            1,
            f
        );
    }
    f = /** @type {string} */ (jspb.Message.getField(message, 2));
    if (f != null) {
        writer.writeString(
            2,
            f
        );
    }
    f = /** @type {string} */ (jspb.Message.getField(message, 3));
    if (f != null) {
        writer.writeString(
            3,
            f
        );
    }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.users.GetReq.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.GetReq} returns this
 */
proto.users.GetReq.prototype.setId = function (value) {
    return jspb.Message.setOneofField(this, 1, proto.users.GetReq.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.users.GetReq} returns this
 */
proto.users.GetReq.prototype.clearId = function () {
    return jspb.Message.setOneofField(this, 1, proto.users.GetReq.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.users.GetReq.prototype.hasId = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.users.GetReq.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.GetReq} returns this
 */
proto.users.GetReq.prototype.setName = function (value) {
    return jspb.Message.setOneofField(this, 2, proto.users.GetReq.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.users.GetReq} returns this
 */
proto.users.GetReq.prototype.clearName = function () {
    return jspb.Message.setOneofField(this, 2, proto.users.GetReq.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.users.GetReq.prototype.hasName = function () {
    return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string Email = 3;
 * @return {string}
 */
proto.users.GetReq.prototype.getEmail = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.GetReq} returns this
 */
proto.users.GetReq.prototype.setEmail = function (value) {
    return jspb.Message.setOneofField(this, 3, proto.users.GetReq.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.users.GetReq} returns this
 */
proto.users.GetReq.prototype.clearEmail = function () {
    return jspb.Message.setOneofField(this, 3, proto.users.GetReq.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.users.GetReq.prototype.hasEmail = function () {
    return jspb.Message.getField(this, 3) != null;
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.users.RegisterReq.prototype.toObject = function (opt_includeInstance) {
        return proto.users.RegisterReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.users.RegisterReq} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.users.RegisterReq.toObject = function (includeInstance, msg) {
        var f, obj = {
            username: jspb.Message.getFieldWithDefault(msg, 1, ""),
            email: jspb.Message.getFieldWithDefault(msg, 2, ""),
            password: jspb.Message.getFieldWithDefault(msg, 3, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.users.RegisterReq}
 */
proto.users.RegisterReq.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.users.RegisterReq;
    return proto.users.RegisterReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.users.RegisterReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.users.RegisterReq}
 */
proto.users.RegisterReq.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setEmail(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setPassword(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.users.RegisterReq.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.users.RegisterReq.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.users.RegisterReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.users.RegisterReq.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getUsername();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getEmail();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getPassword();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
};


/**
 * optional string Username = 1;
 * @return {string}
 */
proto.users.RegisterReq.prototype.getUsername = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.RegisterReq} returns this
 */
proto.users.RegisterReq.prototype.setUsername = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Email = 2;
 * @return {string}
 */
proto.users.RegisterReq.prototype.getEmail = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.RegisterReq} returns this
 */
proto.users.RegisterReq.prototype.setEmail = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Password = 3;
 * @return {string}
 */
proto.users.RegisterReq.prototype.getPassword = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.RegisterReq} returns this
 */
proto.users.RegisterReq.prototype.setPassword = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.users.RegisterRes.prototype.toObject = function (opt_includeInstance) {
        return proto.users.RegisterRes.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.users.RegisterRes} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.users.RegisterRes.toObject = function (includeInstance, msg) {
        var f, obj = {};

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.users.RegisterRes}
 */
proto.users.RegisterRes.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.users.RegisterRes;
    return proto.users.RegisterRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.users.RegisterRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.users.RegisterRes}
 */
proto.users.RegisterRes.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.users.RegisterRes.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.users.RegisterRes.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.users.RegisterRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.users.RegisterRes.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
};


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.users.Token.prototype.toObject = function (opt_includeInstance) {
        return proto.users.Token.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.users.Token} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.users.Token.toObject = function (includeInstance, msg) {
        var f, obj = {
            val: jspb.Message.getFieldWithDefault(msg, 1, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.users.Token}
 */
proto.users.Token.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.users.Token;
    return proto.users.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.users.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.users.Token}
 */
proto.users.Token.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setVal(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.users.Token.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.users.Token.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.users.Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.users.Token.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getVal();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
};


/**
 * optional string Val = 1;
 * @return {string}
 */
proto.users.Token.prototype.getVal = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.users.Token} returns this
 */
proto.users.Token.prototype.setVal = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.users.Access = {
    NONE: 0,
    BASIC: 1
};

goog.object.extend(exports, proto.users);
